---
title: "Çalışma 1"
---


Bu çalışmada 3 görevimiz var. Bu görevler ;

- GitHub üzerinden repo oluşturup Code Busters takımı adına kişiselleştirme,
- Takım Üyelerimizin özgeçmişlerini paylaşma ve
- Portfolyo başlığı altında ilk ödevimizi yayınlamaktır. 

Şuan bu metni okuyorsanız yukarıda listelenen ilk iki görevi doğru yapabilmişiz demektir :)
Üçüncü görev için lütfen okumaya devam edin :)


Üçüncü görev için listelediğimiz maddelere sırayla aşağıda cevap arıyoruz.

## a. Ödev Dokümanında Paylaşılan Kaynaklardan Videoyu Seçimi ve Quarto Dokümanına Kısa Bir Özet Sağlanması

[Video Özet](/portfolyo/video_ozet.qmd)

## b.Özel Fonksiyonlar ve Döngüler ile İstatistiksel Özetlerin Keşfi

```{r}
mtcars
```
```{r}
custom_summary <- function(vec) {              #fonksıyonu vektor olarak tanımladık ;  vec her bir sütunu temsilen
    summary_list <- list(
        mean = mean(vec),                      #gırdıgının ortalaması
        median = median(vec),                  #girdinin medyanı
        std_dev = sd(vec),                     #girdinin std sapması
        min = min(vec),                        #girdinin minimumu
        max = max(vec)                         #girdinin maximumu
    )
    return(summary_list)
}

#bu verileri yazdırabilmek için de değişkene atayıp print ettirmemiz gerekir, aynı zamanda hangi sütunu özetleyeceğimizi belirtmeliyiz, cyl yerine mpg de olabilir 


cyl_summary <- custom_summary(mtcars$cyl)
print(cyl_summary)

```
# Fonksiyonu Döngü Kullanarak Uygulama ve Apply ile Alternatif Bir Yaklaşım

```{r}
custom_summary <- function(vec) {              #fonksıyonu vektor olarak tanımladık ;  vec her bir sütunu temsilen
  summary_list <- list(
    mean = mean(vec),                      #gırdıgının ortalaması
    median = median(vec),                  #girdinin medyanı
    std_dev = sd(vec),                     #girdinin std sapması
    min = min(vec),                        #girdinin minimumu
    max = max(vec)                         #girdinin maximumu
  )
  return(summary_list)
}

#bu verileri yazdırabilmek için de değişkene atayıp print ettirmemiz gerekir, aynı zamanda hangi sütunu özetleyeceğimizi belirtmeliyiz, cyl yerine mpg de olabilir 


cyl_summary <- custom_summary(mtcars$cyl)
print(cyl_summary)

for (n in 1:ncol(mtcars)) {                        # 1'den mtcars data setinin sütun sayısına kadar for loop döndürmek için n değişkeni tanımlandı.
  
  column_name <- colnames(mtcars)[n]               # sütun isimlerini bastırmak için column_name değişkeni tanımlandı. 
  list_of_variables <- custom_summary(mtcars[,n])  # yukarıda tanımlanan custom_summary fonksiyonu çalıştırıldı.
  print(column_name)                               # sütun adı yazdırıldı.
  print(list_of_variables)                         # fonksiyonun içinde hesaplanan değerler bastırıldı.
  
}

apply(mtcars, 2, custom_summary)                   #apply kullanılarak yukarıdaki for döngüsü tek bir komut ile çalıştırıldı.

```

## c.Na Example

```{r}
install.packages("dslabs")
library(dslabs)
print(na_example)                                             #na_example veri seti yazdırıldı.
na_example_na_locations <- is.na(na_example)                  #na_example veri setinde bulunan "NA"lerin konumu array olarak bulundu.
na_total <- sum(na_example_na_locations)                      #toplam "NA" sayısı hesaplandı.
print(na_total)                                               #toplam "NA" sayısı yazdırıldı.
example_665 <- replace(na_example, is.na(na_example), 665)    #na_example veri setinde bulunan "NA" değerleri "665" ile değiştirildi ve oluşan yeni veri seti example_665 adıyla kaydedildi.
print(example_665)                                            #yeni veri seti olan example_665 yazdırıldı.
example_665_na_locations <- is.na(example_665)                #example_665 veri setinde bulunan "NA"lerin konumu array olarak bulundu. (boş array oluşturmalı)
example_665_total_na <- sum(example_665_na_locations)         #example_665 veri setinde bulunan toplam "NA" sayısı hesaplandı.
print(example_665_total_na)                                   #example_665 veri setinde bulunan toplam "NA" sayısı yazdırıldı.
example_665_locations_of_665 <- (example_665 == 665)          #example_665 veri setinde bulunan "665" değerlerinin konumu array olarak bulundu.
example_665_total_665 <- sum(example_665_locations_of_665)    #example_665 veri setinde bulunan toplam "665" sayısı hesaplandı.
print(example_665_total_665)                                  #example_665 veri setinde bulunan toplam "665" sayısı yazdırıldı.
am_i_correct <- na_total == example_665_total_665             #na_example veri setinde bulunan "NA" değerlerinin toplamı ile example_665 veri setinde bulunan "665" değerlerinin toplamı karşılaştırıldı (logical).
if (am_i_correct) {                                           #yukarı satırda karşılaştırılan değerler eşitse "congrats", değilse "try again" yazdırıldı.
  print("congrats")
}  else {
    print("try again")
  }

```

